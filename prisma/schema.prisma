// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    roles         RolesOnUsers[]
    accounts      Account[]
    sessions      Session[]
    sesiones      Sesion[]
    cargas        PacienteOnUser[]     
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Role {
  id      String @id @default(cuid())
  name    String @unique
  users   RolesOnUsers[]
}
model RolesOnUsers {
  user    User  @relation(fields: [userId], references: [id])
  userId  String
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  String
  @@id([userId,roleId])
}
model Sesion {
  id          String @id @default(cuid())
  fecha       DateTime
  realizada   Boolean @default(false)
  recuperada  Boolean @default(false)
  suspendida  Boolean @default(false)
  kinesiologo User @relation(fields: [kineId], references: [id])
  kineId      String
  paciente    Paciente @relation(fields: [pacienteId], references: [id])
  pacienteId  String
}
model Paciente {
  id  String @id @default(cuid())
  rut String @unique
  nombre String 
  sesiones Sesion[]
  responsables PacienteOnUser[]
}

model PacienteOnUser {
  usuario     User @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  paciente    Paciente @relation(fields: [pacienteId], references: [id])
  pacienteId  String
  @@id([usuarioId, pacienteId])
}